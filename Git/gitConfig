# Some git instructions that maybe needed

# initialization configuration
git config --global user.name "username"
git config --global user.email "mail"
git config --global colur.ui true
git config --global core.editor 
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.cm commit
git config --global alias.lol "log --graph --decorate --pretty=oneline --abbrev-commit --all"
git config --global alias.mylog "log --pretty=format:'%h %s [%an]' --graph"

git config --list
git config --global credential.helper cache

mkdir ~/Documents/gitStore
cd ~/Documents/gitStore

git init

# make some file
git add gitConfig.sh

# add everything in all the project in the staging area
git add --all

# take a snapshot of everything in the staging area
git commit -m "a message"

#print out a log of a
git log

#add all txt files in the current directory
git add *.txt 

#add all files in the docs directory
git add docs/ 

#add all txt files in the entire project
git add "*.txt"

# get the differences of files now from repository
git diff

git add --all

git diff --staged

git reset HEAD <file>

git commit -a -m "modify something"

# undoing the last commit, put changes into staging
git reset --soft HEAD^

# undoing the last commit and all the changes
git reset --hard HEAD^

# undoing the last 2 commits and all the changes
git reset --hard HEAD^^

#add to the last commit, (change the last commit)
git add test.txt
git commit --amend -m "this message will overwrite "

#add remote repo(remote repository name is "origin")
git remote add origin remoteGit
git remote -v

#local branch we want to push is master
git push -u origin master

#to pull changes from the remote
git pull 

# to add new remote
git remote add <name> <address>
# to remove remote
git remote rm <name>
# to push to remotes
git push -u <name> <branch>

# don't do these after you push, because these change history
git reset --soft HEAD^
git commit --amend -m "new message"
git reset --hard HEAD^
git reset --hard HEAD^^ 

# cloning a repository
git clone <url-of-repo> <local-folder>

# to create some branch
git branch cat

# to see what branch are we in
git branch

# to jump to the new branch
git checkout branch

# to merge branches
git checkout master
git merge branch

# branch cleanup
git branch -d branch

# create and checkout to a branch at once
git checkout -b admin

# list all remote branches
git branch -r

# remote show
git remote show origin

# removing a branch (remote)
git push origin :<branch_name>

# removing a branch localy
git branch -d <branch_name> 
# if you have unmerged commits, it returns errors

# removing a branch localy (with force)
git branch -D <branch_name>

# to clean up deleted remote branches
git remote prune origin

# list all tags
git tag

# add a new tag
git tag -a v0.0.3 -m "version 0.0.3"

# checkout code at commit
git checkout <tag_name>

# to push new tags
git push --tags

# alternative way to merge two branches (admin is another branch)
# 1-switched to branch admin
git checkout admin 
# 2
git rebase master
# 3
git checkout master
# 4
git merge admin

# important commands in rebase when facing conflicts
git rebase --continue
get rebase --skip
git rebase --abort

# change log format
git log --pretty=format:"%h %ad- %s [%an]"
# place holders: 
# %h	- SHA hash
# %ad	- author date
# %an	- author name
# %s	- subject
# %d	- ref names

# to get a detailed log
git log --oneline -p
git log --oneline --stat
git log --oneline --graph
git log --until=1.minute.ago
git log --since=1.day.ago
git log --since=1.hour.ago
git log --since=1.month.ago --until=2.weeks.ago
git log --since=2000-01-01 --until=2012-12-21

# to get differences in commits
git diff
git diff HEAD
git diff HEAD^
git diff HEAD^^
git diff HEAD~5
git diff HEAD^..HEAD

# between 2 specific commits
git diff <sha1> <sha2>

# get sha of each commit:
git log --oneline

# get differences between 2 branches
git diff master admin

# to see history of a file commits
git blame <filename> --date short

# remove a file from git (also removing from disk)
git rm <filename>

# stop a file from tracking (not removing from disk)
gir rm --cached <filename>

# tell git to ignore some files
# create a file named: .gitignore
# edit the file:
# .gitignore:
logs/*.log
# add it to the repo so every body will have it.
git add .gitignore
git commit -m "Ignore all log files"
